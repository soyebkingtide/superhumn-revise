{%- comment %}BSS Login{% endcomment -%}{% assign last_rule_updated = '1970-01-01T00:00:00.000Z' %} {% unless request.design_mode or request.visual_preview_mode %} {% include 'bss-lock-condition', scope: 'page' %} {% include 'bss-lock-content' %} {% endunless %} {% if bss_lock_access_denied_content == blank %} {% capture bss_lock_access_denied_content %} {% if bss_lock_access_denied %} {{ content_for_layout }} {%endif%} {% endcapture %} {% endif %} {% capture get_general_info_script %} <script defer style="display:none!important;"> window.BSS_Login_Analytics = window.BSS_Login_Analytics || {}; window.BSS_Login_Analytics.lastRuleUpdated = '{{ last_rule_updated }}'; function getCookie(name) { const value = `; ${document.cookie}`; const parts = value.split(`; ${name}=`); if (parts.length === 2) return parts.pop().split(';').shift(); } function getSessionId() { function generateId() { let randomID = null; if (typeof window.crypto === 'undefined' || typeof window.crypto.randomUUID !== 'function') { randomID = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) { const r = Math.random() * 16 | 0; const v = c === 'x' ? r : (r & 0x3 | 0x8); return v.toString(16); }); }; randomID = window.crypto.randomUUID(); window.localStorage.setItem('bss-login-session-id', randomID); return randomID; } let lsSession = window.localStorage.getItem('bss-login-session-id'); let cookieSession = getCookie('_shopify_y'); return lsSession || cookieSession || generateId(); } window.BSS_Login_Analytics.sessionId = getSessionId(); window.BSS_Login_Analytics.customer = { id: '{{ customer.id }}', email: '{{ customer.email }}', first_name: '{{ customer.first_name }}', last_name: '{{ customer.last_name }}', tags: '{{ customer.tags | join: ',' }}', }; window.BSS_Login_Analytics.market = { code: '{{ localization.country.iso_code }}', name: '{{ localization.country.name }}', }; </script> {% endcapture %} {%- if bss_lock_access_denied %} {% if bss_lock_type == 'age_verification' %} {% assign content_for_layout = content_for_layout -%} {{ bss_lock_access_denied_content }} <style> #MainContent, main, #main-content, .main-content  { filter: blur(16px) !important; cursor: not-allowed !important; pointer-events: none !important; } .bss-lock-page-container { min-height: unset !important; padding-top: unset !important; } </style> {% else %} {% assign content_for_layout = bss_lock_access_denied_content %} {% endif %} {% for lock in bss_lock_ids %} {% unless bss_opened_lock_ids contains lock %} {% assign current_lock_id = lock %} {% break %} {% endunless %} {% endfor %} {%- capture authentication -%}{"domain":"{{ shop.permanent_domain }}","ruleId":{{ current_lock_id }},"condition_type":"{{ bss_lock_type }}"}{%- endcapture -%} {% assign authentication = authentication | hmac_sha256: '19f28bb46fef8fa41bd7180b12628ee7' %} {% capture content_for_layout %} {{ content_for_layout }} <script defer style="display:none!important;"> async function reportLockPage() { const rule_id = {{ current_lock_id }}; const lock_condition = '{{ bss_lock_type }}'; const authentication = '{{ authentication }}'; /* reportedRules: { lastReport: string, rules: Array<{ id: number, condition: string, pages: string[] }> }*/ let reportedRules = window.localStorage.getItem('bss-login-page-lock-reported'); try { reportedRules = reportedRules ? JSON.parse(atob(reportedRules)) : { lastReport: '1970-01-01T00:00:00.000Z', rules: [] }; if (!reportedRules.lastReport || !reportedRules.rules || !Array.isArray(reportedRules.rules) || new Date(reportedRules.lastReport) < new Date(window.BSS_Login_Analytics.lastRuleUpdated)) { reportedRules = { lastReport: '1970-01-01T00:00:00.000Z', rules: [] }; }; } catch (err) { reportedRules = { lastReport: '1970-01-01T00:00:00.000Z', rules: [] }; }; const foundReportedRule = reportedRules.rules.find(rule => rule.id == rule_id && rule.condition == lock_condition); if (foundReportedRule) { if (foundReportedRule.pages.includes('{{ request.path }}')) return; else foundReportedRule.pages.push('{{ request.path }}'); } else reportedRules.rules.push({id: rule_id, condition: lock_condition, pages: ['{{ request.path }}']}); const response = await fetch('https://login-api-v2.bsscommerce.com/analytics', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authentication': 'Bearer {{ authentication }}' }, body: JSON.stringify({ domain: window.Shopify.shop, ruleId: rule_id, condition_type: lock_condition, lock_type: 'page', id: window.BSS_Login_Analytics.sessionId, customer: window.BSS_Login_Analytics.customer, page: '{{ request.path }}', market: window.BSS_Login_Analytics.market, }) }); if (response.ok) { window.localStorage.setItem('bss-login-page-lock-reported', btoa(JSON.stringify({ ...reportedRules, lastReport: new Date().toISOString() })) ); } }; reportLockPage(); </script> {% endcapture %} {% else %} {%- capture authentication -%}{"domain":"{{ shop.permanent_domain }}","ruleId":"{{ bss_unlocked_rules }}","condition_type":"{{ bss_unlocked_conditions }}"}{%- endcapture -%} {% assign authentication = authentication | hmac_sha256: '19f28bb46fef8fa41bd7180b12628ee7' %} {% if bss_unlocked_conditions != blank and bss_unlocked_rules != blank %} {% capture content_for_layout %} {{ content_for_layout }} <script defer style="display:none!important;"> async function reportUnlockPage() { const rule_id = '{{ bss_unlocked_rules }}'; const lock_condition = '{{ bss_unlocked_conditions }}'; const authentication = '{{ authentication }}'; /* reportedRules: { lastReport: string, rules: Array<{ id: string, condition: string }> }*/ let reportedRules = window.localStorage.getItem('bss-login-page-unlock-reported'); try { reportedRules = reportedRules ? JSON.parse(atob(reportedRules)) : { lastReport: '1970-01-01T00:00:00.000Z', rules: [] }; if (!reportedRules.lastReport || !reportedRules.rules || !Array.isArray(reportedRules.rules) || new Date(reportedRules.lastReport) < new Date(window.BSS_Login_Analytics.lastRuleUpdated)) { reportedRules = { lastReport: '1970-01-01T00:00:00.000Z', rules: [] }; }; } catch (err) { reportedRules = { lastReport: '1970-01-01T00:00:00.000Z', rules: [] }; }; if (!reportedRules.rules.find(rule => rule.id == rule_id && rule.condition == lock_condition)) { const response = await fetch('https://login-api-v2.bsscommerce.com/analytics', { method: 'PUT', headers: { 'Content-Type': 'application/json', 'Authentication': 'Bearer {{ authentication }}' }, body: JSON.stringify({ domain: window.Shopify.shop, ruleId: rule_id, condition_type: lock_condition, lock_type: 'page', id: window.BSS_Login_Analytics.sessionId, customer: window.BSS_Login_Analytics.customer, page: '{{ request.path }}', market: window.BSS_Login_Analytics.market, }) }); if (response.ok) { window.localStorage.setItem('bss-login-page-unlock-reported', btoa(JSON.stringify({ lastReport: new Date().toISOString(), rules: [...reportedRules.rules, {id: rule_id, condition: lock_condition}] })) ); } } }; reportUnlockPage(); </script> {% endcapture %} {% endif %} {% if content_for_layout contains 'bss-lock-element' %} {% capture content_for_layout %} {{ content_for_layout }} <script style="display:none!important;"> async function reportLockElements() { /* reportedRules: { lastReport: string, rules: Array<{ id: string, condition: string, productIds: string[] }> }*/ let reportedRules = window.localStorage.getItem('bss-login-price-lock-reported'); try { reportedRules = reportedRules ? JSON.parse(atob(reportedRules)) : { lastReport: '1970-01-01T00:00:00.000Z', rules: [] }; if (!reportedRules.lastReport || !reportedRules.rules || !Array.isArray(reportedRules.rules) || new Date(reportedRules.lastReport) < new Date(window.BSS_Login_Analytics.lastRuleUpdated)) { reportedRules = { lastReport: '1970-01-01T00:00:00.000Z', rules: [] }; }; } catch (err) { reportedRules = { lastReport: '1970-01-01T00:00:00.000Z', rules: [] }; }; let currentConditions = window.BSS_Login_Analytics?.lockedConditions ?? []; currentConditions = currentConditions.filter((condition) => { const found = reportedRules.rules.find(rule => rule.id == condition.ruleId && rule.condition == condition.condition_type); if (found) { const notReportedProducts = condition.productIds.filter(id => !found.productIds.includes(id)); if (notReportedProducts.length > 0) { found.productIds = [...found.productIds, ...notReportedProducts]; return true; } return false; } else { reportedRules.rules.push({id: condition.ruleId, condition: condition.condition_type, productIds: condition.productIds}); return true; } }); if (currentConditions && currentConditions.length > 0) { const response = await fetch('https://login-api-v2.bsscommerce.com/analytics', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ domain: window.Shopify.shop, conditions: [...currentConditions], lock_type: 'price', id: window.BSS_Login_Analytics.sessionId, customer: window.BSS_Login_Analytics.customer, market: window.BSS_Login_Analytics.market, }) }); if (response.ok) { window.localStorage.setItem('bss-login-price-lock-reported', btoa(JSON.stringify({ lastReport: new Date().toISOString(), rules: [...reportedRules.rules]})) ); } } }; reportLockElements(); </script> {% endcapture %} {% endif %} {% if content_for_layout contains 'bss-unlocked-element' %} {% capture content_for_layout %} {{ content_for_layout }} <script style="display:none!important;"> async function reportUnlockElements() { /* reportedRules: { lastReport: string, rules: Array<{ id: string, condition: string }> }*/ let reportedRules = window.localStorage.getItem('bss-login-price-unlock-reported'); try { reportedRules = reportedRules ? JSON.parse(atob(reportedRules)) : { lastReport: '1970-01-01T00:00:00.000Z', rules: [] }; if (!reportedRules.lastReport || !reportedRules.rules || !Array.isArray(reportedRules.rules) || new Date(reportedRules.lastReport) < new Date(window.BSS_Login_Analytics.lastRuleUpdated)) { reportedRules = { lastReport: '1970-01-01T00:00:00.000Z', rules: [] }; }; } catch (err) { reportedRules = { lastReport: '1970-01-01T00:00:00.000Z', rules: [] }; }; let currentConditions = window.BSS_Login_Analytics?.unlockedConditions ?? []; currentConditions = currentConditions.filter(e => { const found = reportedRules.rules.find(rule => rule.id === e.ruleId && rule.condition == e.condition_type); if (!found) reportedRules.rules.push({id: e.ruleId, condition: e.condition_type}); return !found; }); if (currentConditions.length > 0) { const response = await fetch('https://login-api-v2.bsscommerce.com/analytics', { method: 'PUT', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ domain: window.Shopify.shop, conditions: [...currentConditions], lock_type: 'price', id: window.BSS_Login_Analytics.sessionId, customer: window.BSS_Login_Analytics.customer, market: window.BSS_Login_Analytics.market, }) }); if (response.ok) { window.localStorage.setItem('bss-login-price-unlock-reported', btoa(JSON.stringify({ lastReport: new Date().toISOString(), rules: [...reportedRules.rules] })) ) } } }; reportUnlockElements() </script> {% endcapture %} {% endif %} {%- endif -%} {% assign content_for_layout = get_general_info_script | append: content_for_layout %} {% if bss_lock_access_denied and bss_lock_no_index == true %} <meta name="robots" content="noindex"/> {% endif %} {% if bss_lock_access_denied and bss_lock_hide_navbar == true %} {% capture bss_hide_navbar %} <style type="text/css"> nav.header__inline-menu { display: none; } </style> {% endcapture %} {% assign content_for_layout = content_for_layout | append: bss_hide_navbar %} {% endif %} {% if bss_lock_access_denied and bss_lock_hide_header == true %} {% capture bss_hide_header_footer %} <style type="text/css"> #shopify-section-header, #shopify-section-sidebar, #shopify-section-sidebar, #shopify-section-announcement-bar, footer, header, #shopify-section-footer, #shopify-section-text-columns-with-icons, a.in-page-link.visually-hidden.skip-link, #shopify-section-announcement, .site-header.site-header--minimal, #shopify-section-static-footer, #shopify-section-static-announcement, .header-section, .site-footer, #shopify-section-header-template, .shopify-section-group-header-group, .announcement-bar-section, .section-header, .shopify-section-group-footer-group { display: none; } html { background: transparent; height: 100%; } </style> <script id="bss-ltap-enable-header-footer" type="text/javascript"> let arrayHeader = [ '#shopify-section-header', '#shopify-section-sidebar', '.site-header.site-header--minimal', '#shopify-section-static-announcement', '.header-section', '#shopify-section-header-template' ]; let customSelector = [ '#shopify-section-sidebar', '#shopify-section-announcement-bar', 'a.in-page-link.visually-hidden.skip-link', '#shopify-section-text-columns-with-icons', '#shopify-section-announcement', '#shopify-section-static-header', '.site-footer', '.header-wrapper' ]; let arrayFooter = ['footer', '#shopify-section-footer']; customSelector = customSelector.concat(arrayFooter, arrayHeader); let disableHeaderFooter = setInterval(timeDisableHeaderFooter, 500); function timeDisableHeaderFooter() { document.querySelector(customSelector).remove(); if (document.querySelector(customSelector) == null) { clearInterval(disableHeaderFooter); } } </script> {% endcapture %} {% assign content_for_layout = content_for_layout | append: bss_hide_header_footer %} {% endif %} {% if trial_expired != nil %} {% if trial_expired %} {% capture bss_trail_banner %} <div id="bss-lock-suspension-notice" style="display: none;"> <div> <span>Your free trial with BSS B2B Lock has ended - <b>All locks in paid plan will be disabled!</b> </span> <a href="/admin/apps/login-to-access-pages/" target="_blank" >Start a subscription or continue with our free plan.<i></i ></a> </div> <div> <span><small>Only you can see this notice.</small></span> <div class="close-bss-banner-container"> <button id="btn-close-bss-banner" style=" position: absolute; top: 8px; right: 10px; background: none; border: none; font-size: 26px; cursor: pointer; color: #fff; ">×</button> </div> </div> </div> <style type="text/css"> #bss-lock-suspension-notice { box-sizing: border-box; min-height: 48px; position: fixed; top: 0; left: 0; right: 0; background: #8C0B0B; color: #fff; padding: 8px 10px; z-index: 2147483647; font-family: inherit; font-size: 14px; line-height: 15px; -webkit-font-smoothing: subpixel-antialiased; display: flex; } #bss-lock-suspension-notice > div { flex-grow: 2; } #bss-lock-suspension-notice > div:last-child { text-align: right; flex-grow: 1; } #bss-lock-suspension-notice small { opacity: 0.8; font-size: 13px; display: block; padding-top: 4px; margin-right: 26px; } #bss-lock-suspension-notice span, #bss-lock-suspension-notice a { display: inline-block; margin: 4px 10px; } #bss-lock-suspension-notice a { margin-left: 0px !important; } #bss-lock-suspension-notice a { background: #fff; color: #a00; font-weight: bold; border-radius: 10px; padding: 6px 10px 6px; white-space: nowrap; transition: transform 0.3s ease-out, box-shadow 0.3s ease-out; display: inline-block; will-change: transform !important; } #bss-lock-suspension-notice a:hover { transform: translate3d(0, -2px, 0); box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); } #bss-lock-suspension-notice a i { margin-left: 3px; position: relative; bottom: 1px; display: inline-block; width: 0; height: 0; border-style: solid; border-width: 3.5px 0 3.5px 3px; border-color: transparent transparent transparent #a00; } </style> {% capture authentication %}{"domain":"{{ shop.permanent_domain }}","ruleId":1}{% endcapture %} {% assign authentication = authentication | hmac_sha256: '19f28bb46fef8fa41bd7180b12628ee7' %} <script type="text/javascript"> const bssBannerTrail = localStorage.getItem('BSS_LOCK_SHOW_BANNER') document.addEventListener('DOMContentLoaded', function () { if (document.getElementById('admin-bar-iframe')) { if (bssBannerTrail !== 'false') { document.getElementById('bss-lock-suspension-notice').style.display = 'flex'; } } const banner = document.getElementById("bss-lock-suspension-notice"); const closeBtn = document.getElementById("btn-close-bss-banner"); closeBtn.addEventListener("click", function () { banner.style.display = "none"; localStorage.setItem('BSS_LOCK_SHOW_BANNER', 'false') fetch("https://login-api-v2.bsscommerce.com/upload-content/banner-trail-expried", { method: "POST", headers: { "Content-Type": "application/json", 'Authentication': 'Bearer {{ authentication }}' }, body: JSON.stringify({ domain: window.Shopify.shop, ruleId: 1, }) }).then(response => response.json()) .then(data => console.log("Upload success:", data)) .catch(error => console.error("Upload failed:", error)); }); }); </script> {% endcapture %} {% unless request.design_mode or request.host contains '.shopifypreview.com' or request.page_type == 'password' %} {% assign content_for_layout = content_for_layout | append: bss_trail_banner %} {% endunless %} {% endif %} {% endif %} {% include 'bss-lock-hide-cart-line' %}{%- comment %}BSS-Login{% endcomment -%}
